// See https://aka.ms/new-console-template for more information
Console.WriteLine("Hello, World!");

// 2-dimentional arrays
var coordinates = new int[3, 4];
coordinates[0, 0] = 7;

var fibonacci = new int[4];

// Linked lists (collections of unknown length)
var fibonacci2 = new List<int>();

fibonacci2.Add(1);
fibonacci2.Add(1);
fibonacci2.Add(2);
fibonacci2.Add(3);
fibonacci2.Add(5);
fibonacci2.Add(7);

// usually we don't need to get elements by index
var element5 = fibonacci2.ElementAt(5);
Console.WriteLine(element5);

// usually we use a foreach
foreach (var fibonacciNumber in fibonacci2)
{
    Console.WriteLine(fibonacciNumber);
}

List<int> newVariable = new();
newVariable.Add(1);

// Dictionary - map keys to values;
Dictionary<string, int> ages = new();

// write a value for a certain key
ages["Hannes"] = 40;
ages["stijn"] = 25;
ages["Joren"] = 26;

// keys are unique and values are overwritten
ages["Stijn"] = 24;


var ageOfStijn = ages["Stijn"]; 
Console.WriteLine(ageOfStijn);

foreach (var name in ages.Keys)
{
    var age = ages[name];
    Console.WriteLine(age);
}



// Classes

Person stijn = new Person();
stijn.Name = "Stijn";
stijn.Age = 25;

stijn.Print();

// use property initialier and property initializers
var hannes = new Person
{
    Name = "Hannes",
    Age = 40,
};

// Use constructors
var student = new Student("Rosa", "El Salvador");
Console.WriteLine(student);

var unknownStudent = new Student();
Console.WriteLine(unknownStudent);

// null means the variable has no value
Student nonExistingStudent = null;
// Throws exception
// Console.WriteLine(nonExistingStudent.Name);

//int? intValue = null;

// With inheritance, everything of the base class is availablle on the inheriting classes
student.Age = -4;
student.Print();

// We cannot do this, because 
// Mammal dog = new Mammal();
// We can do this
Mammal dog = new Dog();




// Convention: class uppercase
class Person
{
    //Convention: public fields uppercase
    //public string Name;
    //public int Age;
    //Convention: private fields: _+ lowercase
    private string _name;
    private int _age;

    // FUll property syntax
    // Convention: properties uppercase
    public int Age
    {
        get { return _age; }
        set 
        {
            if (value < 0)
                _age = 0;
            else if (value > 150)
                _age = 150;
            else
                _age = value;
        }
    }

    // Auto properties
    // The private field gets generated by compiler

    public string Name { get; set; }

    public void Print()
    {
        Console.WriteLine($"{Name} is {Age} years old.");
    }
}

// inheritance:
class Student : Person
{
    // Constructors
    public Student(string name, string country)
    {
        Name = name;
        CountryOfOrigin = country;
    }

    public Student() : this("Unknown", "The world") { }

    public string CountryOfOrigin { get; set; }

    public override string ToString()
    {
        return $"{Name} comes from {CountryOfOrigin}";
    }
}

abstract class Mammal
{
    // This must be implemented by inheriting class

}

class Dog : Mammal
{

}

